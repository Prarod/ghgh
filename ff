import os, secrets, requests
from urllib.parse import urlencode, urlparse
from flask import (
    Flask, redirect, request, session, url_for, jsonify,
    render_template_string, abort, g
)
from dotenv import load_dotenv

load_dotenv()

CLIENT_ID = os.getenv("DISCORD_CLIENT_ID")
CLIENT_SECRET = os.getenv("DISCORD_CLIENT_SECRET")
REDIRECT_URI = os.getenv("DISCORD_REDIRECT_URI", "http://localhost:8000/callback")
SESSION_SECRET = os.getenv("SESSION_SECRET", secrets.token_hex(32))

BOT_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
GUILD_ID = os.getenv("GUILD_ID")
VERIFIED_ROLE_ID = os.getenv("VERIFIED_ROLE_ID")
ADMIN_DISCORD_ID = os.getenv("ADMIN_DISCORD_ID")  # << –∫—Ç–æ –≤–∏–¥–∏—Ç –∞–¥–º–∏–Ω–∫—É

assert CLIENT_ID and CLIENT_SECRET and REDIRECT_URI, "OAuth env missing"
assert BOT_TOKEN and GUILD_ID and VERIFIED_ROLE_ID and ADMIN_DISCORD_ID, "Bot env missing"

AUTHORIZE_BASE = "https://discord.com/oauth2/authorize"
OAUTH_BASE = "https://discord.com/api/oauth2"
API_BASE = "https://discord.com/api"
SCOPES = ["identify", "guilds", "email", "guilds.join", "guilds.members.read"]
SCOPE_STR = " ".join(SCOPES)

app = Flask(__name__)
app.secret_key = SESSION_SECRET

app.config.update(
    SESSION_COOKIE_SAMESITE="Lax",
    SESSION_COOKIE_SECURE=False,
    SESSION_COOKIE_NAME="sess",
    PERMANENT_SESSION_LIFETIME=60*60
)

USERS = {}

def _host_norm(url: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ scheme://host:port (–ø–æ—Ä—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)."""
    p = urlparse(url)
    port = p.port or (443 if p.scheme == "https" else 80)
    return f"{p.scheme}://{p.hostname}:{port}"

def oauth_authorize_url():
    state = secrets.token_urlsafe(16)
    session["oauth_state"] = state
    params = {
        "client_id": CLIENT_ID,
        "response_type": "code",
        "redirect_uri": REDIRECT_URI,
        "scope": SCOPE_STR,
        "state": state,
        "prompt": "consent",
    }
    return f"{AUTHORIZE_BASE}?{urlencode(params)}"

def bot_headers():
    return {"Authorization": f"Bot {BOT_TOKEN}", "Content-Type": "application/json"}

def get_me(access_token: str):
    r = requests.get(f"{API_BASE}/users/@me", headers={"Authorization": f"Bearer {access_token}"})
    if r.status_code != 200:
        return None, f"/users/@me failed [{r.status_code}]: {r.text}"
    return r.json(), None

def ensure_member_and_role(user_id: str, user_access_token: str):

    get_member_url = f"{API_BASE}/guilds/{GUILD_ID}/members/{user_id}"
    r = requests.get(get_member_url, headers=bot_headers())

    if r.status_code == 200:

        put_role_url = f"{API_BASE}/guilds/{GUILD_ID}/members/{user_id}/roles/{VERIFIED_ROLE_ID}"
        rr = requests.put(put_role_url, headers=bot_headers())
        if rr.status_code == 204:
            return True, "role added"
        return False, f"add role failed [{rr.status_code}]: {rr.text}"

    if r.status_code == 404:
        add_url = f"{API_BASE}/guilds/{GUILD_ID}/members/{user_id}"
        payload = {"access_token": user_access_token, "roles": [int(VERIFIED_ROLE_ID)]}
        rr = requests.put(add_url, json=payload, headers=bot_headers())
        if rr.status_code in (201, 204):
            return True, "joined & role added"
        return False, f"join failed [{rr.status_code}]: {rr.text}"

    return False, f"member check failed [{r.status_code}]: {r.text}"

def is_logged_in():
    return bool(session.get("access_token"))

def current_user_id():
    return session.get("me_id")

@app.before_request
def _inject_admin_flag():
    g.logged_in = is_logged_in()
    g.me_id = current_user_id()
    g.is_admin = g.logged_in and str(g.me_id) == str(ADMIN_DISCORD_ID)

BASE = """
{% macro layout(title, body, toast=None) -%}
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>{{ title }}</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-slate-50 text-slate-900">
  <header class="border-b bg-white/80 backdrop-blur sticky top-0 z-10">
    <div class="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
      <a href="{{ url_for('index') }}" class="font-bold text-lg">‚ú® Prarod Verify</a>
      <nav class="flex items-center gap-2">
        {% if g.logged_in %}
          <a href="{{ url_for('verify') }}" class="hidden sm:inline-flex rounded-lg px-3 py-1.5 bg-emerald-600 text-white hover:bg-emerald-700 transition">‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>
          <a href="{{ url_for('me') }}" class="rounded-lg px-3 py-1.5 hover:bg-slate-100">–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</a>
          <a href="{{ url_for('my_member') }}" class="rounded-lg px-3 py-1.5 hover:bg-slate-100">–ú–æ–π —Å—Ç–∞—Ç—É—Å</a>
          {% if g.is_admin %}
            <a href="{{ url_for('admin_dashboard') }}" class="rounded-lg px-3 py-1.5 bg-slate-900 text-white hover:bg-slate-800">–ê–¥–º–∏–Ω–∫–∞</a>
          {% endif %}
          <a href="{{ url_for('logout') }}" class="rounded-lg px-3 py-1.5 hover:bg-slate-100">–í—ã–π—Ç–∏</a>
        {% else %}
          <a href="{{ url_for('login') }}" class="rounded-lg px-3 py-1.5 border border-slate-300 hover:bg-slate-100">–í–æ–π—Ç–∏ Discord</a>
        {% endif %}
      </nav>
    </div>
  </header>

  {% if toast %}
  <div class="max-w-2xl mx-auto mt-4 px-4">
    <div class="rounded-xl bg-emerald-50 border border-emerald-200 px-4 py-3 text-emerald-800">
      {{ toast }}
    </div>
  </div>
  {% endif %}

  <main class="max-w-6xl mx-auto px-4 py-6">
    {{ body|safe }}
  </main>

  <footer class="py-8 text-center text-sm text-slate-500">
    made by prarodüòã
  </footer>
</body>
</html>
{%- endmacro %}
"""

@app.route("/")
def index():
    me = USERS.get(g.me_id) if g.logged_in else None

    body = render_template_string("""
      <div class="grid md:grid-cols-2 gap-6 items-start">
        <section class="bg-white rounded-2xl shadow-sm border p-6">
          <h1 class="text-2xl font-semibold mb-2">–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</h1>
          <p class="text-slate-600 mb-6">
            –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Äî –µ—Å–ª–∏ —Ç—ã —É–∂–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –º—ã –ø—Ä–æ—Å—Ç–æ –¥–∞–¥–∏–º —Ä–æ–ª—å <b>verified</b>.
            –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏–º —Ç–µ–±—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ —Å—Ä–∞–∑—É –ø–æ–≤–µ—Å–∏–º —Ä–æ–ª—å.
          </p>

          {% if g.logged_in %}
            <div class="flex flex-wrap items-center gap-3">
              <a href="{{ url_for('verify') }}" class="inline-flex rounded-xl px-5 py-3 bg-emerald-600 text-white font-medium hover:bg-emerald-700 transition">‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>
              <span class="text-slate-500">–∏–ª–∏</span>
              <a href="{{ url_for('verify') }}" class="text-emerald-700 hover:underline">–ø–æ —Å—Å—ã–ª–∫–µ</a>
            </div>
            {% if me %}
              <div class="mt-6 flex items-center gap-3">
                <div class="size-10 rounded-full bg-slate-200"></div>
                <div class="text-sm text-slate-600">–í–æ—à—ë–ª –∫–∞–∫ <b>{{ me.get('global_name') or me.get('username') }}</b></div>
              </div>
            {% endif %}
          {% else %}
            <a href="{{ url_for('login') }}" class="inline-flex rounded-xl px-5 py-3 border border-slate-300 bg-white hover:bg-slate-100 font-medium">–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Discord</a>
          {% endif %}
        </section>

        <section class="bg-white rounded-2xl shadow-sm border p-6">
          <h2 class="text-xl font-semibold mb-2">–ß—Ç–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç?</h2>
          <ul class="list-disc pl-5 text-slate-700 space-y-2">
            <li>–í—ã–¥–∞–µ—Ç –≤–∞–º —Ä–æ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ</li>
            <li>–ë–æ–Ω—É—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</li>
            <li>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏, –¥–æ–≤–µ—Ä–∏–µ –æ—Ç –∫–æ–¥–µ—Ä–æ–≤ + –ø—Ä–æ–±–Ω—ã–µ –∫–ª—é—á–∏ –Ω–∞ –≤—ã—Å—à–∏–π —Å—Ä–æ–∫</li>
          </ul>
        </section>
      </div>

      {% if g.is_admin %}
      <div class="mt-8">
        <a href="{{ url_for('admin_dashboard') }}" class="inline-flex rounded-xl px-4 py-2 bg-slate-900 text-white hover:bg-slate-800">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É</a>
      </div>
      {% endif %}
    """, me=me)

    return render_template_string(BASE + "{{ layout('–ì–ª–∞–≤–Ω–∞—è', body) }}", body=body)

@app.route("/login")
def login():

    session.clear()

    current = _host_norm(request.host_url.rstrip("/"))
    target = _host_norm(REDIRECT_URI)
    if current != target:
        return (
            "redirect_uri host mismatch\n"
            f"open_site_at = {current}\n"
            f"REDIRECT_URI = {REDIRECT_URI}\n"
            "‚Üí –æ—Ç–∫—Ä–æ–π —Å–∞–π—Ç —Ä–æ–≤–Ω–æ –Ω–∞ —ç—Ç–æ–º –∂–µ —Ö–æ—Å—Ç–µ/–ø–æ—Ä—Ç—É –ò–õ–ò –ø–æ–ø—Ä–∞–≤—å DISCORD_REDIRECT_URI –∏ Redirects –≤ Dev Portal.\n",
            400
        )

    auth_url = oauth_authorize_url()

    if request.args.get("show") == "1":
        return f"<pre>{auth_url}</pre>"
    return redirect(auth_url)

@app.route("/callback")
def callback():
    got_state = request.args.get("state")
    expected = session.get("oauth_state")

    if not got_state or not expected or got_state != expected:

        return (
            "state mismatch ‚Äî –∑–∞–π–¥–∏ —á–µ—Ä–µ–∑ /login\n"
            f"got_state={got_state}\n"
            f"expected_state={expected}\n"
            "hint: –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ö–æ—Å—Ç (localhost –ò–õ–ò 127.0.0.1) –∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–π /callback –≤—Ä—É—á–Ω—É—é.\n",
            400
        )

    session.pop("oauth_state", None)

    code = request.args.get("code")
    if not code:
        return "no code in query", 400

    data = {"grant_type": "authorization_code", "code": code, "redirect_uri": REDIRECT_URI}
    headers = {"Content-Type": "application/x-www-form-urlencoded"}

    r = requests.post(f"{OAUTH_BASE}/token", data=data, headers=headers, auth=(CLIENT_ID, CLIENT_SECRET))
    if r.status_code != 200:
        return (
            "token exchange failed\n"
            f"status={r.status_code}\n"
            f"body={r.text}\n"
            f"redirect_uri_sent={REDIRECT_URI}\n",
            400
        )

    tokens = r.json()
    session["access_token"] = tokens["access_token"]
    session["refresh_token"] = tokens.get("refresh_token")

    me, err = get_me(tokens["access_token"])
    if me and "id" in me:
        USERS[me["id"]] = {
            "id": me.get("id"),
            "username": f'{me.get("username")}#{me.get("discriminator")}' if me.get("discriminator") else me.get("username"),
            "global_name": me.get("global_name"),
            "email": me.get("email"),
            "avatar": me.get("avatar")
        }
        session["me_id"] = me["id"]

    return redirect(url_for("index"))

@app.route("/me")
def me():
    if not g.logged_in:
        return redirect(url_for("login"))
    at = session["access_token"]
    me, err = get_me(at)
    guilds = requests.get(f"{API_BASE}/users/@me/guilds", headers={"Authorization": f"Bearer {at}"}).json()
    if me and "id" in me:
        USERS[me["id"]] = {
            **USERS.get(me["id"], {}),
            "id": me.get("id"),
            "username": f'{me.get("username")}#{me.get("discriminator")}' if me.get("discriminator") else me.get("username"),
            "global_name": me.get("global_name"),
            "email": me.get("email"),
            "avatar": me.get("avatar")
        }
        session["me_id"] = me["id"]
    return jsonify({"user": me or {"error": err}, "guilds": guilds})

@app.route("/verify", methods=["GET", "POST"])
def verify():
    if not g.logged_in:
        return redirect(url_for("login"))
    at = session["access_token"]
    me, err = get_me(at)
    if not me or "id" not in me:
        return f"cannot fetch user: {err}", 400

    ok, msg = ensure_member_and_role(me["id"], at)
    toast = f"‚úÖ –ì–æ—Ç–æ–≤–æ: {msg}" if ok else f"‚ùå –û—à–∏–±–∫–∞: {msg}"
    body = render_template_string("""
      <div class="bg-white rounded-2xl shadow-sm border p-8 text-center">
        <div class="text-2xl font-semibold mb-2">{{ '–£—Å–ø–µ—Ö' if ok else '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫' }}</div>
        <p class="text-slate-600">{{ msg }}</p>
        <div class="mt-6">
          <a href="{{ url_for('index') }}" class="rounded-xl px-4 py-2 border border-slate-300 hover:bg-slate-100">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
        </div>
      </div>
    """, ok=ok, msg=msg)
    return render_template_string(BASE + "{{ layout('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', body, toast) }}", body=body, toast=toast)

@app.route("/my/member")
def my_member():
    if not g.logged_in:
        return redirect(url_for("login"))
    if not g.me_id:
        return "no session user", 400

    url = f"{API_BASE}/guilds/{GUILD_ID}/members/{g.me_id}"
    r = requests.get(url, headers=bot_headers())
    if r.status_code != 200:
        return f"member fetch failed [{r.status_code}]: {r.text}", 400
    return jsonify(r.json())

def require_admin():
    if not g.logged_in:
        return redirect(url_for("login"))
    if not g.is_admin:
        abort(403)

@app.route("/admin")
def admin_dashboard():
    require_admin()
    q = (request.args.get("q") or "").lower().strip()
    data = list(USERS.values())
    if q:
        data = [u for u in data if q in (u.get("id") or "").lower()
                          or q in (u.get("username") or "").lower()
                          or q in (u.get("global_name") or "").lower()
                          or q in (u.get("email") or "").lower()]

    body = render_template_string("""
      <div class="bg-white rounded-2xl shadow-sm border p-6">
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
          <h1 class="text-2xl font-semibold">–ê–¥–º–∏–Ω–∫–∞</h1>
          <form class="flex gap-2" method="get" action="{{ url_for('admin_dashboard') }}">
            <input name="q" value="{{ q }}" placeholder="id / username / email"
                   class="px-3 py-2 border border-slate-300 rounded-lg w-72">
            <button class="px-4 py-2 rounded-lg bg-slate-900 text-white hover:bg-slate-800">–ù–∞–π—Ç–∏</button>
          </form>
        </div>

        <div class="overflow-x-auto">
          <table class="min-w-full text-sm">
            <thead>
              <tr class="text-left border-b">
                <th class="py-2 pr-4">ID</th>
                <th class="py-2 pr-4">Global name</th>
                <th class="py-2 pr-4">Username</th>
                <th class="py-2 pr-4">Email</th>
                <th class="py-2 pr-4">–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {% if data %}
                {% for u in data %}
                <tr class="border-b hover:bg-slate-50">
                  <td class="py-2 pr-4">{{ u.get('id') }}</td>
                  <td class="py-2 pr-4">{{ u.get('global_name') or '' }}</td>
                  <td class="py-2 pr-4">{{ u.get('username') or '' }}</td>
                  <td class="py-2 pr-4">{{ u.get('email') or '' }}</td>
                  <td class="py-2 pr-4">
                    <a href="{{ url_for('admin_user_view', target_id=u.get('id')) }}" class="px-3 py-1.5 rounded-lg border hover:bg-slate-100">–ü—Ä–æ—Ñ–∏–ª—å</a>
                    <a href="{{ url_for('admin_give_role', target_id=u.get('id')) }}" class="ml-2 px-3 py-1.5 rounded-lg bg-emerald-600 text-white hover:bg-emerald-700">–í—ã–¥–∞—Ç—å verified</a>
                  </td>
                </tr>
                {% endfor %}
              {% else %}
                <tr><td colspan="5" class="py-6 text-center text-slate-500">–ü–æ–∫–∞ –ø—É—Å—Ç–æ ‚Äî –ø—É—Å—Ç—å –ª—é–¥–∏ –∑–∞–ª–æ–≥–∏–Ω—è—Ç—Å—è</td></tr>
              {% endif %}
            </tbody>
          </table>
        </div>
      </div>
    """, q=q, data=data)

    return render_template_string(BASE + "{{ layout('–ê–¥–º–∏–Ω–∫–∞', body) }}", body=body)

@app.route("/admin/user/<target_id>")
def admin_user_view(target_id):
    require_admin()
    app_user = USERS.get(target_id)
    member_url = f"{API_BASE}/guilds/{GUILD_ID}/members/{target_id}"
    r = requests.get(member_url, headers=bot_headers())
    guild_member = r.json() if r.status_code == 200 else {"error": f"member fetch [{r.status_code}]: {r.text}"}

    body = render_template_string("""
      <div class="grid lg:grid-cols-2 gap-6">
        <section class="bg-white rounded-2xl shadow-sm border p-6">
          <h2 class="text-xl font-semibold mb-3">–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h2>
          <pre class="bg-slate-50 rounded-xl p-4 text-xs overflow-x-auto">{{ app_user|tojson(indent=2) }}</pre>
          <p class="text-slate-500 text-sm mt-2"></p>
        </section>
        <section class="bg-white rounded-2xl shadow-sm border p-6">
          <h2 class="text-xl font-semibold mb-3">–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –≥–∏–ª—å–¥–∏–∏</h2>
          <pre class="bg-slate-50 rounded-xl p-4 text-xs overflow-x-auto">{{ guild_member|tojson(indent=2) }}</pre>
          {% if guild_member and not guild_member.get('error') %}
          <div class="mt-4">
            <a href="{{ url_for('admin_give_role', target_id=target_id) }}" class="inline-flex rounded-xl px-4 py-2 bg-emerald-600 text-white hover:bg-emerald-700">–í—ã–¥–∞—Ç—å verified</a>
          </div>
          {% endif %}
        </section>
      </div>
      <div class="mt-6">
        <a href="{{ url_for('admin_dashboard') }}" class="px-4 py-2 rounded-lg border hover:bg-slate-100">‚Üê –ö —Å–ø–∏—Å–∫—É</a>
      </div>
    """, app_user=app_user, guild_member=guild_member, target_id=target_id)

    return render_template_string(BASE + "{{ layout('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', body) }}", body=body)

@app.route("/admin/give-role/<target_id>")
def admin_give_role(target_id):
    require_admin()

    check = requests.get(f"{API_BASE}/guilds/{GUILD_ID}/members/{target_id}", headers=bot_headers())
    if check.status_code != 200:
        return f"member fetch failed [{check.status_code}]: {check.text}", 400

    url = f"{API_BASE}/guilds/{GUILD_ID}/members/{target_id}/roles/{VERIFIED_ROLE_ID}"
    rr = requests.put(url, headers=bot_headers())
    if rr.status_code != 204:
        return f"add role failed [{rr.status_code}]: {rr.text}", 400
    return redirect(url_for('admin_user_view', target_id=target_id))

@app.route("/refresh")
def refresh():
    rt = session.get("refresh_token")
    if not rt:
        return "no refresh token", 400
    data = {"grant_type": "refresh_token", "refresh_token": rt, "redirect_uri": REDIRECT_URI}
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    r = requests.post(f"{OAUTH_BASE}/token", data=data, headers=headers, auth=(CLIENT_ID, CLIENT_SECRET))
    if r.status_code != 200:
        return f"refresh failed: {r.text}", 400
    tokens = r.json()
    session["access_token"] = tokens["access_token"]
    session["refresh_token"] = tokens.get("refresh_token")
    return "ok"

@app.route("/logout")
def logout():
    at = session.get("access_token")
    if at:
        requests.post(f"{OAUTH_BASE}/token/revoke",
                      data={"token": at},
                      headers={"Content-Type": "application/x-www-form-urlencoded"},
                      auth=(CLIENT_ID, CLIENT_SECRET))
    session.clear()
    return redirect(url_for("index"))

@app.errorhandler(403)
def forbidden(_e):
    body = """
      <div class="bg-white rounded-2xl shadow-sm border p-8 text-center">
        <div class="text-2xl font-semibold mb-2">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</div>
        <p class="text-slate-600">–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</p>
        <div class="mt-6">
          <a href="/" class="rounded-xl px-4 py-2 border border-slate-300 hover:bg-slate-100">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
        </div>
      </div>
    """
    return render_template_string(BASE + "{{ layout('403', body) }}", body=body), 403

if __name__ == "__main__":
    app.run(port=8000, debug=True)
